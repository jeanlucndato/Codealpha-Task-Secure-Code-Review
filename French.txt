Absolument ! Voici un exemple détaillé basé sur Python Django pour répondre à la question de la revue de code sécurisé, avec des fichiers et des détails concrets.

1. Choix de l'Application Django : Une Application Simple de Blog

Imaginons une application Django de blog très simple avec les fonctionnalités suivantes :

Affichage d'une liste d'articles.
Affichage du contenu d'un article.
Possibilité pour un utilisateur authentifié de commenter les articles.
2. Fichiers de l'Application Django (Exemples Partiels) :

Voici des extraits de fichiers Django pertinents pour la revue de sécurité :

blog/models.py :

Python

from django.db import models
from django.contrib.auth.models import User

class Article(models.Model):
    title = models.CharField(max_length=200)
    slug = models.SlugField(unique=True)
    content = models.TextField()
    author = models.ForeignKey(User, on_delete=models.CASCADE)
    created_at = models.DateTimeField(auto_now_add=True)

    def __str__(self):
        return self.title

class Comment(models.Model):
    article = models.ForeignKey(Article, on_delete=models.CASCADE)
    author = models.ForeignKey(User, on_delete=models.CASCADE)
    text = models.TextField()
    created_at = models.DateTimeField(auto_now_add=True)

    def __str__(self):
        return f"Comment by {self.author.username} on {self.article.title}"
blog/views.py :

Python

from django.shortcuts import render, get_object_or_404, redirect
from django.contrib.auth.decorators import login_required
from .models import Article, Comment
from .forms import CommentForm
from django.db import connection  # Pour l'exemple d'injection SQL

def article_list(request):
    articles = Article.objects.all()
    return render(request, 'blog/article_list.html', {'articles': articles})

def article_detail(request, slug):
    article = get_object_or_404(Article, slug=slug)
    comments = Comment.objects.filter(article=article).order_by('-created_at')
    form = CommentForm()
    return render(request, 'blog/article_detail.html', {'article': article, 'comments': comments, 'form': form})

@login_required
def add_comment(request, slug):
    article = get_object_or_404(Article, slug=slug)
    if request.method == 'POST':
        form = CommentForm(request.POST)
        if form.is_valid():
            comment = form.save(commit=False)
            comment.article = article
            comment.author = request.user
            comment.save()
            return redirect('blog:article_detail', slug=slug)
    else:
        form = CommentForm()
    return render(request, 'blog/add_comment.html', {'form': form, 'article': article})

def search_articles(request):
    query = request.GET.get('q')
    if query:
        # VULNÉRABILITÉ D'INJECTION SQL POTENTIELLE (NE PAS FAIRE EN PRODUCTION !)
        cursor = connection.cursor()
        cursor.execute(f"SELECT * FROM blog_article WHERE title LIKE '%%{query}%%' OR content LIKE '%%{query}%%'")
        articles = [Article(id=row[0], title=row[1], slug=row[2], content=row[3], author_id=row[4], created_at=row[5]) for row in cursor.fetchall()]
        return render(request, 'blog/article_list.html', {'articles': articles})
    else:
        articles = Article.objects.all()
        return render(request, 'blog/article_list.html', {'articles': articles})
blog/forms.py :

Extrait de code

from django import forms
from .models import Comment

class CommentForm(forms.ModelForm):
    class Meta:
        model = Comment
        fields = ('text',)
        widgets = {
            'text': forms.Textarea(attrs={'rows': 3, 'required': True})
        }
blog/templates/blog/article_detail.html :

Extrait de code

<h1>{{ article.title }}</h1>
<p>Par {{ article.author.username }} le {{ article.created_at }}</p>
<div>{{ article.content|safe }}</div> <h2>Commentaires</h2>
<ul>
    {% for comment in comments %}
        <li>{{ comment.author.username }} a dit : {{ comment.text }} ({{ comment.created_at }})</li>
    {% endfor %}
</ul>

{% if request.user.is_authenticated %}
    <a href="{% url 'blog:add_comment' slug=article.slug %}">Ajouter un commentaire</a>
{% else %}
    <p><a href="{% url 'login' %}?next={{ request.path }}">Connectez-vous</a> pour commenter.</p>
{% endif %}
blog/templates/blog/add_comment.html :

Extrait de code

<h1>Ajouter un commentaire à "{{ article.title }}"</h1>
<form method="post">
    {% csrf_token %}
    {{ form.as_p }}
    <button type="submit">Commenter</button>
</form>
<a href="{% url 'blog:article_detail' slug=article.slug %}">Retour à l'article</a>
3. Revue de Code Manuelle pour les Vulnérabilités :

En examinant manuellement le code ci-dessus, on peut identifier plusieurs vulnérabilités potentielles :

Injection SQL (dans blog/views.py, fonction search_articles) :

La ligne cursor.execute(f"SELECT * FROM blog_article WHERE title LIKE '%%{query}%%' OR content LIKE '%%{query}%%'") construit une requête SQL en utilisant directement la variable query provenant de l'entrée utilisateur (request.GET.get('q')). Si un utilisateur entre une requête malveillante comme "test%'; DROP TABLE blog_article; --", cela pourrait potentiellement exécuter des commandes SQL arbitraires sur la base de données, entraînant une perte de données ou un accès non autorisé. Ceci est une vulnérabilité d'injection SQL classique.
Cross-Site Scripting (XSS) potentielle (dans blog/templates/blog/article_detail.html) :

La ligne <div>{{ article.content|safe }}</div> désactive l'échappement automatique de Django pour le contenu de l'article. Si un auteur malveillant a créé un article contenant du code JavaScript malveillant, ce code pourrait s'exécuter dans le navigateur des autres utilisateurs lorsqu'ils consultent l'article. Ceci est une vulnérabilité XSS. L'utilisation du filtre |safe doit être extrêmement prudente et réservée aux contenus explicitement considérés comme sûrs (par exemple, après un traitement de désinfection rigoureux).
Cross-Site Request Forgery (CSRF) (manque potentiellement dans certains formulaires) :

Bien que le template blog/add_comment.html inclue le tag {% csrf_token %}, il est crucial de s'assurer que tous les formulaires POST dans l'application Django (y compris ceux qui pourraient être ajoutés ultérieurement pour l'édition ou la suppression d'articles) utilisent le {% csrf_token %} pour se protéger contre les attaques CSRF. Un attaquant pourrait potentiellement forcer un utilisateur authentifié à effectuer des actions non voulues sur l'application.
Vulnérabilités liées à la gestion des utilisateurs et des permissions (non illustré en détail ici mais important) :

Dans une application plus complexe, il faudrait examiner attentivement la gestion des utilisateurs, l'authentification, l'autorisation et les permissions pour s'assurer que seuls les utilisateurs autorisés peuvent effectuer certaines actions (par exemple, créer, modifier ou supprimer des articles).
4. Utilisation d'un Outil d'Analyse de Code Statique (Exemple avec bandit pour Python Django) :

bandit peut également être utilisé pour analyser le code Django. En exécutant bandit -r . dans le répertoire racine de votre projet Django, il pourrait signaler des problèmes potentiels tels que l'utilisation de requêtes SQL brutes (comme dans search_articles), des problèmes potentiels liés à l'échappement de templates (bien que sa détection puisse être limitée pour les contextes Django), et d'autres risques de sécurité courants dans le code Python.

Exemple de sortie potentielle de bandit (simplifiée) :

./blog/views.py:28:0:B608: Possible SQL injection vulnerability via parameter query (High)
./blog/templates/blog/article_detail.html:3:5:S308: Django template autoescape is off for variable article.content (Medium)
5. Recommandations pour des Pratiques de Codage Sécurisé dans Django :

Pour résoudre les vulnérabilités identifiées et promouvoir des pratiques de codage sécurisé dans Django :

Éviter l'injection SQL :

Solution pour search_articles : Utiliser l'ORM (Object-Relational Mapper) de Django pour interagir avec la base de données. Remplacer la requête SQL brute par une requête Django ORM utilisant Article.objects.filter(Q(title__icontains=query) | Q(content__icontains=query)). L'ORM de Django s'occupe de l'échappement et de la sécurisation des requêtes.
<!-- end list -->

    from django.db.models import Q

def search_articles(request):
    query = request.GET.get('q')
    if query:
        articles = Article.objects.filter(Q(title__icontains=query) | Q(content__icontains=query))
        return render(request, 'blog/article_list.html', {'articles': articles})
    else:
        articles = Article.objects.all()
        return render(request, 'blog/article_list.html', {'articles': articles})
```
Prévenir le Cross-Site Scripting (XSS) :

Solution pour article_detail.html : Éviter d'utiliser le filtre |safe à moins que le contenu ne soit explicitement désinfecté par une bibliothèque fiable (comme bleach) et que vous compreniez parfaitement les risques. Dans la plupart des cas, laissez l'échappement automatique de Django faire son travail. Si vous devez afficher du HTML, utilisez une bibliothèque de désinfection pour nettoyer le contenu avant de le marquer comme sûr.
<!-- end list -->

Extrait de code

<div>{{ article.content }}</div> ```

Si vous devez autoriser certains éléments HTML (par exemple, pour la mise en forme), utilisez une bibliothèque comme `bleach` dans votre modèle ou votre vue pour nettoyer le contenu :

```python
import bleach
from django.db import models
from django.contrib.auth.models import User

ALLOWED_TAGS = ['p', 'b', 'i', 'u', 'em', 'strong', 'a', 'ul', 'ol', 'li', 'br']
ALLOWED_ATTRIBUTES = {'a': ['href', 'title']}

class Article(models.Model):
    # ... autres champs
    content_raw = models.TextField()

    @property
    def content(self):
        return bleach.clean(self.content_raw, tags=ALLOWED_TAGS, attributes=ALLOWED_ATTRIBUTES)
Et dans le template : <div>{{ article.content }}</div>.

Se protéger contre le Cross-Site Request Forgery (CSRF) :

Bonne pratique : S'assurer que le middleware django.middleware.csrf.CsrfViewMiddleware est activé dans votre fichier settings.py (il l'est par défaut dans les nouveaux projets Django). Utiliser le tag de template {% csrf_token %} dans tous les formulaires POST. Django vérifiera la présence de ce token pour prévenir les attaques CSRF.
Sécurité des Utilisateurs et des Permissions :

Utiliser le système d'authentification et de permissions intégré de Django (django.contrib.auth).
Appliquer les permissions basées sur les rôles ou les objets si nécessaire.
Éviter de coder en dur des vérifications d'autorisation et utiliser les décorateurs (@login_required, @permission_required) et les classes de permission de Django Rest Framework (si vous utilisez une API).
Utilisation d'Outils de Sécurité :

Analyse Statique : Intégrer régulièrement des outils comme bandit, flake8 (avec des plugins de sécurité), et potentiellement des outils plus spécifiques à Django comme django-security-check.
Analyse Dynamique : Utiliser des outils comme OWASP ZAP pour tester l'application en cours d'exécution à la recherche de vulnérabilités.
Audits de Sécurité : Envisager des audits de sécurité professionnels pour les applications critiques.
Mises à Jour de Sécurité :

Maintenir Django et toutes les bibliothèques tierces à jour avec les dernières versions pour corriger les vulnérabilités connues. Surveiller les annonces de sécurité.
Configuration Sécurisée :

Examiner attentivement les paramètres de sécurité dans settings.py (par exemple, SECRET_KEY, DEBUG, ALLOWED_HOSTS, SECURE_SSL_REDIRECT, SECURE_HSTS_SECONDS, etc.) et les configurer de manière appropriée pour un environnement de production.
En suivant ces principes et en utilisant les outils appropriés, vous pouvez améliorer considérablement la sécurité de votre application Django. Pour votre stage, concentrez-vous sur la démonstration de votre capacité à identifier des vulnérabilités courantes et à proposer des solutions basées sur les meilleures pratiques de sécurité spécifiques à Django.


 Sources




